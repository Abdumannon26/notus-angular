{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nconst dashboard = gql`\n  query{\n    allDashboardCards {\n      id\n      cardName\n      cardType\n      count\n      percent\n      perCentType\n      period\n    }\n  }\n`;\nconst user = gql`\n  query User($id: ID!){\n    User(id: $id) {\n         id\n         userName\n         userEmail\n         userMiddleName\n         userSurname\n         userAddress\n         city\n         country\n         postalCode\n         description\n    }\n  }\n`;\nconst updateUser = gql`\n        mutation updateUser($userInput: UserInput!) {\n          updateUser(input: $userInput) {\n            id\n            name\n            email\n            middleName\n            surname\n            address\n            city\n            country\n            postalCode\n            description\n          }\n        }`;\nexport let AdminService = /*#__PURE__*/(() => {\n  class AdminService {\n    constructor(apollo) {\n      this.apollo = apollo;\n    }\n    getHeaderStats() {\n      return this.apollo.watchQuery({\n        query: dashboard\n      });\n    }\n    getUser(userId) {\n      return this.apollo.watchQuery({\n        query: user,\n        variables: {\n          id: userId\n        }\n      });\n    }\n    createUser(userForm) {\n      return this.apollo.mutate({\n        mutation: updateUser,\n        variables: {\n          userForm\n        }\n      });\n    }\n    static #_ = this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.Apollo));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac\n    });\n  }\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}